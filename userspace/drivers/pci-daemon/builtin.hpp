// SPDX-License-Identifier: GPL-3.0-or-later

// #pragma once is not used here because this file is included multiple times in the same compilation unit

// PCI Class Codes
// _X(CLASS, SUBCLASS, PROGIF, NAME)
// do note that the values are in hex, not decimal, although the '0x' prefix is not present

#ifndef _X
#error "pci_classes.h must be included with _X defined"
#endif

_X(0x00, 0x00, 0x00, "Unclassified device")
_X(0x00, 0x01, 0x00, "VGA compatible device")
_X(0x01, 0x00, 0x00, "SCSI bus controller")
_X(0x01, 0x01, 0x00, "IDE Controller, ISA Compatibility mode")
_X(0x01, 0x01, 0x05, "IDE Controller, PCI native mode")
_X(0x01, 0x01, 0x0a, "IDE Controller, ISA Compatibility mode, supports both channels switched to PCI native mode")
_X(0x01, 0x01, 0x0f, "IDE Controller, PCI native mode controller, supports both channels switched to ISA compatibility mode")
_X(0x01, 0x01, 0x80, "IDE Controller, ISA Compatibility mode-only controller, supports bus mastering")
_X(0x01, 0x01, 0x85, "IDE Controller, PCI native mode-only controller, supports bus mastering")
_X(0x01, 0x01, 0x8a, "IDE Controller, ISA Compatibility mode controller, supports both channels switched to PCI native mode, supports bus mastering")
_X(0x01, 0x01, 0x8f, "IDE Controller, PCI native mode controller, supports both channels switched to ISA compatibility mode, supports bus mastering ")
_X(0x01, 0x02, 0x00, "Floppy disk controller")
_X(0x01, 0x03, 0x00, "IPI bus controller")
_X(0x01, 0x04, 0x00, "RAID bus controller")
_X(0x01, 0x05, 0x20, "ATA controller")
_X(0x01, 0x06, 0x00, "SATA controller")
_X(0x01, 0x07, 0x00, "Serial Attached SCSI controller")
_X(0x01, 0x08, 0x00, "NVMHCI controller")
_X(0x01, 0x08, 0x01, "NVM Express controller")
_X(0x01, 0x80, 0x00, "Other mass storage controller")
_X(0x02, 0x00, 0x00, "Ethernet controller")
_X(0x02, 0x07, 0x00, "InfiniBand controller")
_X(0x02, 0x80, 0x00, "Other network controller")
_X(0x03, 0x00, 0x00, "VGA compatible controller")
_X(0x03, 0x00, 0x01, "8514 controller")
_X(0x03, 0x01, 0x00, "XGA controller")
_X(0x03, 0x02, 0x00, "3D controller")
_X(0x03, 0x80, 0x00, "Other display controller")
_X(0x04, 0x00, 0x00, "Multimedia video controller")
_X(0x04, 0x01, 0x00, "Multimedia audio controller")
_X(0x04, 0x02, 0x00, "Computer telephony device")
_X(0x04, 0x03, 0x00, "Audio device")
_X(0x04, 0x80, 0x00, "Other multimedia controller")
_X(0x05, 0x00, 0x00, "RAM memory")
_X(0x05, 0x01, 0x00, "FLASH memory")
_X(0x05, 0x80, 0x00, "Other memory controller")
_X(0x06, 0x00, 0x00, "Host bridge")
_X(0x06, 0x01, 0x00, "ISA bridge")
_X(0x06, 0x02, 0x00, "EISA bridge")
_X(0x06, 0x03, 0x00, "MCA bridge")
_X(0x06, 0x04, 0x00, "PCI-to-PCI bridge")
_X(0x06, 0x04, 0x01, "PCI-to-PCI bridge (subtractive decoding)")
_X(0x06, 0x05, 0x00, "PCMCIA bridge")
_X(0x06, 0x06, 0x00, "NuBus bridge")
_X(0x06, 0x07, 0x00, "CardBus bridge")
_X(0x06, 0x08, 0x00, "RACEway bridge")
_X(0x06, 0x09, 0x40, "Semi-transparent PCI-to-PCI bridge, primary side")
_X(0x06, 0x09, 0x80, "Semi-transparent PCI-to-PCI bridge, secondary side")
_X(0x06, 0x0a, 0x00, "InfiniBand to PCI host bridge")
_X(0x06, 0x80, 0x00, "Other bridge device")
_X(0x07, 0x00, 0x00, "Serial controller")
_X(0x07, 0x01, 0x00, "Parallel controller")
_X(0x07, 0x05, 0x00, "Smart Card Controller")
_X(0x07, 0x80, 0x00, "Other communication controller")
_X(0x08, 0x00, 0x00, "Generic 8259 PIC")
_X(0x08, 0x00, 0x01, "ISA PIC")
_X(0x08, 0x00, 0x02, "EISA PIC")
_X(0x08, 0x00, 0x10, "I/O APIC")
_X(0x08, 0x00, 0x20, "I/O(x) APIC")
_X(0x08, 0x01, 0x00, "Generic 8237 DMA controller")
_X(0x08, 0x01, 0x01, "ISA DMA controller")
_X(0x08, 0x01, 0x02, "EISA DMA controller")
_X(0x08, 0x02, 0x00, "Generic 8254 system timer")
_X(0x08, 0x02, 0x01, "ISA system timer")
_X(0x08, 0x02, 0x02, "EISA system timer")
_X(0x08, 0x02, 0x03, "HPET")
_X(0x08, 0x03, 0x00, "Generic RTC controller")
_X(0x08, 0x03, 0x01, "ISA RTC controller")
_X(0x08, 0x04, 0x00, "Generic PCI Hot-plug controller")
_X(0x08, 0x05, 0x00, "SD Host controller")
_X(0x08, 0x06, 0x00, "IOMMU")
_X(0x08, 0x80, 0x00, "Other system peripheral")
_X(0x09, 0x00, 0x00, "Keyboard controller")
_X(0x09, 0x01, 0x00, "Digitizer Pen")
_X(0x09, 0x02, 0x00, "Mouse controller")
_X(0x09, 0x03, 0x00, "Scanner controller")
_X(0x09, 0x04, 0x00, "Gameport controller")
_X(0x09, 0x80, 0x00, "Other input controller")
_X(0x0a, 0x00, 0x00, "Generic Docking Station")
_X(0x0a, 0x80, 0x00, "Other type of docking station")
_X(0x0b, 0x00, 0x00, "CPU - 386")
_X(0x0b, 0x01, 0x00, "CPU - 486")
_X(0x0b, 0x02, 0x00, "CPU - Pentium")
_X(0x0b, 0x10, 0x00, "Alpha")
_X(0x0b, 0x20, 0x00, "PowerPC")
_X(0x0b, 0x30, 0x00, "MIPS")
_X(0x0b, 0x40, 0x00, "Co-processor")
_X(0x0b, 0x80, 0x00, "Other processor")
_X(0x0c, 0x00, 0x00, "FireWire (IEEE 1394)")
_X(0x0c, 0x03, 0x00, "USB controller (UHCI)")
_X(0x0c, 0x03, 0x10, "USB controller (OHCI)")
_X(0x0c, 0x03, 0x20, "USB controller (EHCI)")
_X(0x0c, 0x03, 0x30, "USB controller (XHCI)")
_X(0x0c, 0x03, 0x80, "USB controller (Unspecified)")
_X(0x0c, 0x03, 0xfe, "USB device")
_X(0x0c, 0x04, 0x00, "Fibre controller")
_X(0x0c, 0x05, 0x00, "SMBus")
_X(0x0c, 0x06, 0x00, "InfiniBand")
_X(0x0c, 0x07, 0x00, "IPMI SMIC interface")
_X(0x0c, 0x07, 0x01, "IPMI Kybd controller style interface")
_X(0x0c, 0x07, 0x02, "IPMI Block transfer interface")
_X(0x0c, 0x08, 0x00, "SERCOS interface standard (IEC 61491)")
_X(0x0c, 0x09, 0x40, "CANbus")
_X(0x0c, 0x80, 0x00, "Other system peripheral")
_X(0x0d, 0x00, 0x00, "iRDA compatible controller")
_X(0x0d, 0x01, 0x00, "Consumer IR controller")
_X(0x0d, 0x10, 0x00, "RF controller")
_X(0x0d, 0x11, 0x00, "Bluetooth controller")
_X(0x0d, 0x12, 0x00, "Broadband controller")
_X(0x0d, 0x20, 0x00, "Ethernet (802.11a)")
_X(0x0d, 0x21, 0x00, "Ethernet (802.11b)")
_X(0x0d, 0x80, 0x00, "Other network controller")
