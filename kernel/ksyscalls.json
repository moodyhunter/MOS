{
    "$schema": "../assets/syscalls.schema.json",
    "includes": [
        "mos/filesystem/fs_types.h",
        "mos/io/io_types.h",
        "mos/mos_global.h",
        "mos/tasks/signal_types.h",
        "mos/types.h",
        "sys/poll.h",
        "sys/select.h",
        "sys/uio.h"
    ],
    "syscalls": [
        {
            "number": 1,
            "name": "vfs_openat",
            "return": "fd_t",
            "arguments": [
                { "type": "fd_t", "arg": "dirfd" },
                { "type": "const char *", "arg": "file_path" },
                { "type": "u64", "arg": "flags" }
            ]
        },
        {
            "number": 2,
            "name": "vfs_fstatat",
            "return": "long",
            "arguments": [
                { "type": "fd_t", "arg": "dirfd" },
                { "type": "const char *", "arg": "file_path" },
                { "type": "file_stat_t *", "arg": "stat_buf" },
                { "type": "u64", "arg": "flags" }
            ]
        },
        {
            "number": 3,
            "name": "io_read",
            "return": "size_t",
            "arguments": [
                { "type": "fd_t", "arg": "fd" },
                { "type": "void *", "arg": "buffer" },
                { "type": "size_t", "arg": "size" }
            ]
        },
        {
            "number": 4,
            "name": "io_write",
            "return": "size_t",
            "arguments": [
                { "type": "fd_t", "arg": "fd" },
                { "type": "const void *", "arg": "buffer" },
                { "type": "size_t", "arg": "size" }
            ]
        },
        {
            "number": 5,
            "name": "io_close",
            "return": "bool",
            "arguments": [ { "type": "fd_t", "arg": "fd" } ]
        },
        {
            "number": 6,
            "name": "exit",
            "return": null,
            "arguments": [ { "type": "u32", "arg": "exit_code" } ]
        },
        {
            "number": 7,
            "name": "yield_cpu",
            "return": "void",
            "arguments": [ ]
        },
        {
            "number": 8,
            "name": "fork",
            "return": "pid_t",
            "arguments": [ ]
        },
        {
            "number": 10,
            "name": "get_pid",
            "return": "pid_t",
            "arguments": [ ]
        },
        {
            "number": 11,
            "name": "get_parent_pid",
            "return": "pid_t",
            "arguments": [ ]
        },
        {
            "number": 12,
            "name": "spawn",
            "return": "pid_t",
            "arguments": [
                { "type": "const char *", "arg": "file_path" },
                { "type": "const char *const *", "arg": "argv" },
                { "type": "const char *const *", "arg": "envp" }
            ]
        },
        {
            "number": 13,
            "name": "create_thread",
            "return": "tid_t",
            "arguments": [
                { "type": "const char *", "arg": "name" },
                { "type": "thread_entry_t", "arg": "entry" },
                { "type": "void *", "arg": "arg" },
                { "type": "size_t", "arg": "stack_size" },
                { "type": "void *", "arg": "stack" }
            ]
        },
        {
            "number": 14,
            "name": "get_tid",
            "return": "tid_t",
            "arguments": [ ]
        },
        {
            "number": 15,
            "name": "thread_exit",
            "return": null,
            "arguments": [ ]
        },
        {
            "number": 17,
            "name": "wait_for_thread",
            "return": "bool",
            "arguments": [ { "type": "tid_t", "arg": "tid" } ]
        },
        {
            "number": 18,
            "name": "futex_wait",
            "return": "bool",
            "arguments": [
                { "type": "futex_word_t *", "arg": "futex" },
                { "type": "u32", "arg": "val" }
            ]
        },
        {
            "number": 19,
            "name": "futex_wake",
            "return": "bool",
            "arguments": [
                { "type": "futex_word_t *", "arg": "futex" },
                { "type": "size_t", "arg": "count" }
            ]
        },
        {
            "number": 20,
            "name": "ipc_create",
            "return": "fd_t",
            "arguments": [
                { "type": "const char *", "arg": "name" },
                { "type": "size_t", "arg": "max_pending_connections" }
            ]
        },
        {
            "number": 21,
            "name": "ipc_accept",
            "return": "fd_t",
            "arguments": [ { "type": "fd_t", "arg": "fd" } ]
        },
        {
            "number": 22,
            "name": "ipc_connect",
            "return": "fd_t",
            "arguments": [
                { "type": "const char *", "arg": "name" },
                { "type": "size_t", "arg": "buffer_size" }
            ]
        },
        {
            "number": 23,
            "name": "arch_syscall",
            "return": "u64",
            "arguments": [
                { "type": "u64", "arg": "nr" },
                { "type": "u64", "arg": "arg1" },
                { "type": "u64", "arg": "arg2" },
                { "type": "u64", "arg": "arg3" },
                { "type": "u64", "arg": "arg4" }
            ],
            "comments": [
                "This syscall is used to implement architecture-specific syscalls.",
                "The first argument is the syscall number, and the remaining arguments",
                "are the arguments to the syscall."
            ]
        },
        {
            "number": 24,
            "name": "vfs_mount",
            "return": "long",
            "arguments": [
                { "type": "const char *", "arg": "device" },
                { "type": "const char *", "arg": "mount_point" },
                { "type": "const char *", "arg": "fs_type" },
                { "type": "const char *", "arg": "options" }
            ]
        },
        {
            "number": 25,
            "name": "vfs_readlinkat",
            "return": "ssize_t",
            "arguments": [
                { "type": "fd_t", "arg": "dirfd" },
                { "type": "const char *", "arg": "path" },
                { "type": "char *", "arg": "buf" },
                { "type": "size_t", "arg": "buf_size" }
            ]
        },
        {
            "number": 26,
            "name": "vfs_unlinkat",
            "return": "long",
            "arguments": [
                { "type": "fd_t", "arg": "dirfd" },
                { "type": "const char *", "arg": "path" }
            ]
        },
        {
            "number": 27,
            "name": "vfs_symlink",
            "return": "long",
            "arguments": [
                { "type": "const char *", "arg": "link_path" },
                { "type": "const char *", "arg": "target" }
            ]
        },
        {
            "number": 28,
            "name": "vfs_mkdir",
            "return": "long",
            "arguments": [ { "type": "const char *", "arg": "path" } ]
        },
        {
            "number": 29,
            "name": "vfs_list_dir",
            "return": "size_t",
            "arguments": [
                { "type": "fd_t", "arg": "fd" },
                { "type": "char *", "arg": "buffer" },
                { "type": "size_t", "arg": "buffer_size" }
            ]
        },
        {
            "number": 30,
            "name": "fd_manipulate",
            "return": "long",
            "arguments": [
                { "type": "fd_t", "arg": "fd" },
                { "type": "u64", "arg": "cmd" },
                { "type": "void *", "arg": "arg" }
            ]
        },
        {
            "number": 31,
            "name": "mmap_anonymous",
            "return": "void *",
            "arguments": [
                { "type": "ptr_t", "arg": "hint_addr" },
                { "type": "size_t", "arg": "size" },
                { "type": "mem_perm_t", "arg": "perm" },
                { "type": "u64", "arg": "flags" }
            ]
        },
        {
            "number": 32,
            "name": "mmap_file",
            "return": "void *",
            "arguments": [
                { "type": "ptr_t", "arg": "hint_addr" },
                { "type": "size_t", "arg": "size" },
                { "type": "mem_perm_t", "arg": "perm" },
                { "type": "u64", "arg": "flags" },
                { "type": "fd_t", "arg": "fd" },
                { "type": "off_t", "arg": "offset" }
            ]
        },
        {
            "number": 33,
            "name": "wait_for_process",
            "return": "pid_t",
            "arguments": [
                { "type": "pid_t", "arg": "pid" },
                { "type": "u32 *", "arg": "exit_code" },
                { "type": "u64", "arg": "flags" }
            ]
        },
        {
            "number": 34,
            "name": "munmap",
            "return": "bool",
            "arguments": [
                { "type": "void *", "arg": "addr" },
                { "type": "size_t", "arg": "size" }
            ]
        },
        {
            "number": 35,
            "name": "vfs_chdirat",
            "return": "long",
            "arguments": [
                { "type": "fd_t", "arg": "dirfd" },
                { "type": "const char *", "arg": "path" }
            ]
        },
        {
            "number": 36,
            "name": "vfs_getcwd",
            "return": "ssize_t",
            "arguments": [
                { "type": "char *", "arg": "buf" },
                { "type": "size_t", "arg": "buf_size" }
            ]
        },
        {
            "number": 37,
            "name": "io_seek",
            "return": "off_t",
            "arguments": [
                { "type": "fd_t", "arg": "fd" },
                { "type": "off_t", "arg": "offset" },
                { "type": "io_seek_whence_t", "arg": "whence" }
            ]
        },
        {
            "number": 38,
            "name": "io_tell",
            "return": "off_t",
            "arguments": [ { "type": "fd_t", "arg": "fd" } ]
        },
        {
            "number": 39,
            "name": "signal_register",
            "return": "bool",
            "arguments": [
                { "type": "signal_t", "arg": "signum" },
                { "type": "const sigaction_t *", "arg": "action" }
            ]
        },
        {
            "number": 40,
            "name": "signal_process",
            "return": "long",
            "arguments": [
                { "type": "pid_t", "arg": "pid" },
                { "type": "signal_t", "arg": "signum" }
            ],
            "comments": [
                "Send a signal to a process, an arbitrary thread in the target process",
                "will be selected to receive the signal."
            ]
        },
        {
            "number": 41,
            "name": "signal_thread",
            "return": "long",
            "arguments": [
                { "type": "tid_t", "arg": "tid" },
                { "type": "signal_t", "arg": "signum" }
            ],
            "comments": [ "Send a signal to a specific thread in a process." ]
        },
        {
            "number": 42,
            "name": "poweroff",
            "return": "void",
            "arguments": [
                { "type": "bool", "arg": "reboot" },
                { "type": "u32", "arg": "magic" }
            ]
        },
        {
            "number": 43,
            "name": "signal_return",
            "return": null,
            "arguments": [ { "type": "void *", "arg": "sp" } ]
        },
        {
            "number": 44,
            "name": "vm_protect",
            "return": "bool",
            "arguments": [
                { "type": "void *", "arg": "addr" },
                { "type": "size_t", "arg": "size" },
                { "type": "mem_perm_t", "arg": "perm" }
            ]
        },
        {
            "number": 45,
            "name": "io_poll",
            "return": "int",
            "arguments": [
                { "type": "struct pollfd *", "arg": "fds" },
                { "type": "nfds_t", "arg": "nfds" },
                { "type": "int", "arg": "timeout" }
            ]
        },
        {
            "number": 46,
            "name": "io_pselect",
            "return": "int",
            "arguments": [
                { "type": "int", "arg": "nfds" },
                { "type": "fd_set *", "arg": "readfds" },
                { "type": "fd_set *", "arg": "writefds" },
                { "type": "fd_set *", "arg": "exceptfds" },
                { "type": "const struct timespec *", "arg": "timeout" },
                { "type": "const sigset_t *", "arg": "sigmask" }
            ]
        },
        {
            "number": 47,
            "name": "execveat",
            "return": "long",
            "arguments": [
                { "type": "fd_t", "arg": "dirfd" },
                { "type": "const char *", "arg": "file_path" },
                { "type": "const char *const *", "arg": "argv" },
                { "type": "const char *const *", "arg": "envp" },
                { "type": "u64", "arg": "flags" }
            ]
        },
        {
            "number": 48,
            "name": "clock_msleep",
            "return": "long",
            "arguments": [ { "type": "u64", "arg": "ms" } ]
        },
        {
            "number": 49,
            "name": "io_dup",
            "return": "fd_t",
            "arguments": [ { "type": "fd_t", "arg": "fd" } ]
        },
        {
            "number": 50,
            "name": "io_dup2",
            "return": "fd_t",
            "arguments": [
                { "type": "fd_t", "arg": "old_fd" },
                { "type": "fd_t", "arg": "new_fd" }
            ]
        },
        {
            "number": 51,
            "name": "dmabuf_alloc",
            "return": "bool",
            "arguments": [
                { "type": "size_t", "arg": "n_pages" },
                { "type": "ptr_t *", "arg": "out_paddr" },
                { "type": "ptr_t *", "arg": "out_vaddr" }
            ],
            "comments": [
                "Allocate a DMA buffer, the buffer will be physically contiguous and its virtual address",
                "will be mapped into user's address space."
            ]
        },
        {
            "number": 52,
            "name": "dmabuf_free",
            "return": "bool",
            "arguments": [
                { "type": "ptr_t", "arg": "vaddr" },
                { "type": "ptr_t", "arg": "paddr" }
            ],
            "comments": [
                "Free a DMA buffer that was previously allocated with dma_alloc().",
                "The buffer will be unmapped from user's address space, and its physical pages",
                "will be reclaimed."
            ]
        },
        {
            "number": 53,
            "name": "dmabuf_share",
            "return": "bool",
            "arguments": [
                { "type": "void *", "arg": "buf" },
                { "type": "size_t", "arg": "bufsize" },
                { "type": "ptr_t *", "arg": "out_paddr" }
            ],
            "comments": [
                "Export (copy) a userspace buffer to a DMA buffer address that can be used by devices.",
                "The physical address of the buffer will be returned in out_paddr."
            ]
        },
        {
            "number": 54,
            "name": "dmabuf_unshare",
            "return": "bool",
            "arguments": [
                { "type": "ptr_t", "arg": "paddr" },
                { "type": "size_t", "arg": "size" },
                { "type": "void *", "arg": "vaddr" }
            ],
            "comments": [
                "Unshare a DMA buffer that was previously shared with dmabuf_share().",
                "The buffer will be freed after this call.",
                "The content of the buffer will be copied back to the userspace buffer, if vaddr is not NULL."
            ]
        },
        {
            "number": 55,
            "name": "pipe",
            "return": "long",
            "arguments": [
                { "type": "fd_t *", "arg": "out_read_fd" },
                { "type": "fd_t *", "arg": "out_write_fd" },
                { "type": "u64", "arg": "flags" }
            ]
        },
        {
            "number": 56,
            "name": "io_readv",
            "return": "ssize_t",
            "arguments": [
                { "type": "fd_t", "arg": "fd" },
                { "type": "const struct iovec *", "arg": "iov" },
                { "type": "int", "arg": "iov_count" }
            ]
        },
        {
            "number": 57,
            "name": "vfs_unmount",
            "return": "long",
            "arguments": [ { "type": "const char *", "arg": "mount_point" } ]
        },
        {
            "number": 58,
            "name": "clock_gettimeofday",
            "return": "long",
            "arguments": [ { "type": "struct timespec *", "arg": "tv" } ]
        },
        {
            "number": 59,
            "name": "thread_setname",
            "return": "long",
            "arguments": [
                { "type": "tid_t", "arg": "tid" },
                { "type": "const char *", "arg": "name" }
            ]
        },
        {
            "number": 60,
            "name": "thread_getname",
            "return": "ssize_t",
            "arguments": [
                { "type": "tid_t", "arg": "tid" },
                { "type": "char *", "arg": "buf" },
                { "type": "size_t", "arg": "buf_size" }
            ]
        },
        {
            "number": 61,
            "name": "vfs_fchmodat",
            "return": "long",
            "arguments": [
                { "type": "fd_t", "arg": "dirfd" },
                { "type": "const char *", "arg": "path" },
                { "type": "int", "arg": "mode" },
                { "type": "u64", "arg": "flags" }
            ]
        },
        {
            "number": 62,
            "name": "io_pread",
            "return": "long",
            "arguments": [
                { "type": "fd_t", "arg": "fd" },
                { "type": "void *", "arg": "buf" },
                { "type": "size_t", "arg": "count" },
                { "type": "off_t", "arg": "offset" }
            ]
        },
        {
            "number": 63,
            "name": "memfd_create",
            "return": "fd_t",
            "arguments": [
                { "type": "const char *", "arg": "name" },
                { "type": "u64", "arg": "flags" }
            ]
        },
        {
            "number": 64,
            "name": "signal_mask_op",
            "return": "long",
            "arguments": [
                { "type": "int", "arg": "how" },
                { "type": "const sigset_t *", "arg": "set" },
                { "type": "sigset_t *", "arg": "oldset" }
            ]
        },
        {
            "number": 65,
            "name": "vfs_fsync",
            "return": "long",
            "arguments": [
                { "type": "fd_t", "arg": "fd" },
                { "type": "bool", "arg": "data_only" }
            ],
            "comments": [
                "Synchronize the file to disk.",
                "If data_only is true, only the file data is synchronized, otherwise both data and metadata are synchronized."
            ]
        },
        {
            "number": 66,
            "name": "vfs_rmdir",
            "return": "long",
            "arguments": [ { "type": "const char *", "arg": "path" } ]
        },
        {
            "number": 67,
            "name": "kmod_load",
            "return": "long",
            "arguments": [
                { "type": "const char *", "arg": "path" }
            ],
            "comments": [
                "Load a kernel module from the specified path."
            ]
        },
        {
            "number": 68,
            "name": "kmod_call",
            "return": "long",
            "arguments": [
                { "type": "const char *", "arg": "module_name" },
                { "type": "const char *", "arg": "function_name" },
                { "type": "void *", "arg": "arg" },
                { "type": "size_t", "arg": "arg_size" }
            ],
            "comments": [
                "Call a function in a loaded kernel module.",
                "The module must be loaded with kmod_load() before calling this syscall.",
                "The function must be exported by the module."
            ]
        }
    ]
}
