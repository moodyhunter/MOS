syntax = "proto3";
import "nanopb.proto";
import "mosrpc.proto";

option (nanopb_fileopt).fallback_type = FT_POINTER;
option (nanopb_fileopt).proto3_singular_msgs = true;

package mosrpc.blockdev;

message blockdev
{
    uint32 devid = 1;
}

message partition
{
    uint32 partid = 1;
}

message blockdev_info
{
    string name = 1;
    uint64 size = 2;
    uint32 block_size = 3;
    uint64 n_blocks = 4;
}

message partition_info
{
    string name = 1;
    uint64 size = 2;
    uint32 partid = 3;
}

// blockdev manager interface

message register_device_request
{
    string server_name = 1;
    blockdev_info device_info = 2;
}

message register_device_response
{
    mosrpc.result result = 1;
    uint32 id = 2;
}

message register_layer_server_request
{
    string server_name = 1;
    repeated partition_info partitions = 2;
}

message register_layer_server_response
{
    mosrpc.result result = 1;
    uint32 id = 2;
}

// ! read
message read_block_request
{
    blockdev device = 1; // caller only
    uint64 n_boffset = 2;
    uint32 n_blocks = 3;
}

message read_block_response
{
    mosrpc.result result = 1;
    bytes data = 2;
}

// ! write
message write_block_request
{
    blockdev device = 1; // caller only
    bytes data = 2;
    uint64 n_boffset = 3;
    uint32 n_blocks = 4;
}

message write_block_response
{
    mosrpc.result result = 1;
    uint32 n_blocks = 2;
}

// ! open device
message open_device_request
{
    string device_name = 1;
}

message open_device_response
{
    mosrpc.result result = 1;
    blockdev device = 2;
}

message read_partition_block_request
{
    blockdev device = 1;
    partition partition = 2;
    uint64 n_boffset = 3;
    uint32 n_blocks = 4;
}

message write_partition_block_request
{
    blockdev device = 1;
    partition partition = 2;
    bytes data = 3;
    uint64 n_boffset = 4;
    uint32 n_blocks = 5;
}
