syntax = "proto3";
import "nanopb.proto";

option (nanopb_fileopt).fallback_type = FT_POINTER;
option (nanopb_fileopt).enum_to_string = true;
option (nanopb_fileopt).proto3_singular_msgs = true;

message mos_rpc_result
{
    bool success = 1;
    optional string error = 2;
}

enum pb_file_type_t
{
    FILE_TYPE_REGULAR = 0;
    FILE_TYPE_DIRECTORY = 1;
    FILE_TYPE_SYMLINK = 2;
    FILE_TYPE_CHAR_DEVICE = 3;
    FILE_TYPE_BLOCK_DEVICE = 4;
    FILE_TYPE_NAMED_PIPE = 5;
    FILE_TYPE_SOCKET = 6;
    FILE_TYPE_UNKNOWN = 7;
};

message pb_file_stat
{
    uint64 ino = 1;
    pb_file_type_t type = 2;
    uint32 perm = 3;
    uint64 size = 4;
    uint32 uid = 5;
    uint32 gid = 6;
    bool sticky = 7;
    bool suid = 8;
    bool sgid = 9;
    uint64 nlinks = 10;
    uint64 accessed = 11;
    uint64 created = 12;
    uint64 modified = 13;
}

message pb_inode
{
    // in real life, this stat is too big to be passed around, not all its fields are needed
    // actually, we only need the inode id and the private data
    pb_file_stat stat = 1;
    uint64 private_data = 2; // the private data of the inode, may be used by the filesystem
}

message pb_dentry
{
    uint64 inode_id = 1;
    string name = 2;
}

message pb_fs
{
    string name = 1; // the name of the filesystem
}

message mos_rpc_fs_register_request
{
    pb_fs fs = 1;
    string rpc_server_name = 2;
}

message mos_rpc_fs_register_response
{
    mos_rpc_result result = 1;
}

message mos_rpc_fs_mount_request
{
    string fs_name = 1;
    string device = 2;
    string options = 3;
}

message mos_rpc_fs_mount_response
{
    mos_rpc_result result = 1;
    pb_inode root_i = 2; // the root inode of the mounted root
}

message pb_dirent
{
    uint64 ino = 1;
    string name = 2;
    pb_file_type_t type = 3;
}

message mos_rpc_fs_readdir_request
{
    pb_inode inode = 1; // the inode to read
}

message mos_rpc_fs_readdir_response
{
    mos_rpc_result result = 1;
    repeated pb_dirent entries = 2;
}

message mos_rpc_fs_lookup_request
{
    pb_inode inode = 1; // the inode of parent directory
    string name = 2;    // the name of the file to lookup
}

message mos_rpc_fs_lookup_response
{
    mos_rpc_result result = 1;
    pb_inode inode = 2; // the inode of the file
}

message mos_rpc_fs_readlink_request
{
    pb_inode inode = 1; // the inode of the symlink
}

message mos_rpc_fs_readlink_response
{
    mos_rpc_result result = 1;
    string target = 2; // the target of the symlink
}

message mos_rpc_fs_getpage_request
{
    pb_inode inode = 1; // the inode of the file
    uint64 pgoff = 2;   // the offset of the page, in number of pages
}

message mos_rpc_fs_getpage_response
{
    mos_rpc_result result = 1;

    // the data of the page, this is currently a raw byte array, which costs a lot of memory
    // we could use a page manager to reference a page and only pass a page uuid here
    bytes data = 2;
}
